# LetterPeople

> LetterPeople is a TypeScript library that creates animated letter characters with facial features. The library renders letters as SVG elements with attachments like eyes and mouths that can be animated (blinking, speaking, etc.).

## Overview

LetterPeople offers a simple way to create engaging, personified letter characters as SVG elements. Each letter can have animated features like eyes, mouth, and arms with a component-based API that makes it easy to control these elements individually.

## Core API Usage

```javascript
// Basic usage
import { createLetter } from 'letterpeople';

// Create a container element
const container = document.createElement('div');
document.body.appendChild(container);

// Create an animated letter
const letterL = createLetter('L', container, {
  color: '#add8e6',       // Letter fill color
  lineWidth: 25,          // Thickness of letter
  borderColor: '#333333', // Letter outline color
  borderWidth: 4,         // Letter outline thickness
  mouthParams: {
    openness: 0.1,        // How open the mouth is (0-1)
    mood: 0.7             // How happy/sad the mouth is (0-1)
  },
  eyeSize: 8,             // Size of the eyes
  eyeTracking: true,      // Enable cursor tracking
  eyeTrackingIntensity: 0.5, // How strongly eyes follow cursor (0-1)
  armLength: 15,          // Length of arms
  armThickness: 3,        // Thickness of arms
  armColor: '#333333'     // Color of arms
});

// Animate the letter
letterL.mouth.animateSpeak();  // Make the mouth speak
letterL.eyes.blink();          // Make the eyes blink
letterL.arms.wave();           // Make the arms wave

// Eye tracking and looking
letterL.eyes.lookAt(45);      // Look at 45 degree angle
letterL.eyes.lookAt({x: 5, y: -2}); // Look at specific offset coordinates
letterL.eyes.startTracking({intensity: 0.6}); // Follow cursor with 60% intensity
letterL.eyes.stopTracking();  // Stop following cursor

// Control individual parts
letterL.mouth.updateShape({ openness: 0.5, mood: 0.2 });
letterL.arms.left.rotateTo(45);  // Rotate left arm to 45 degrees
letterL.arms.right.setLength(20); // Change right arm length

// Show/hide attachments
letterL.eyes.hide();  // Hide the eyes
letterL.mouth.show(); // Show the mouth

// Cleanup when done
letterL.destroy();
```

## Vue Integration

LetterPeople includes a Vue 3 component for easy integration:

```vue
<template>
  <div class="letter-container">
    <LetterPerson
      :letter="currentLetter"
      :options="letterOptions"
      ref="letterRef"
      @created="onLetterCreated"
      @trackingChanged="onTrackingChanged"
    />
    
    <button @click="animateMouth">Speak</button>
    <button @click="blinkEyes">Blink</button>
    <button @click="lookAt45">Look</button>
    <button @click="toggleTracking">Toggle Tracking</button>
  </div>
</template>

<script setup>
import { ref, reactive } from 'vue';
import LetterPerson from 'letterpeople/vue';

const currentLetter = ref('L');
const letterRef = ref(null);
const letterOptions = reactive({
  color: '#add8e6',
  lineWidth: 25,
  borderColor: '#333333',
  borderWidth: 4,
  mouthParams: {
    openness: 0.2,
    mood: 0.7
  },
  eyeTracking: false,        // Whether eyes follow cursor
  eyeTrackingIntensity: 0.5  // How strongly eyes follow cursor (0-1)
});

const animateMouth = () => {
  letterRef.value?.animateMouth();
};

const blinkEyes = () => {
  letterRef.value?.blink();
};

const lookAt45 = () => {
  letterRef.value?.lookAt(45); // Look at 45 degree angle
};

const toggleTracking = () => {
  letterRef.value?.toggleEyeTracking({
    intensity: 0.7 // Tracking intensity (0-1)
  });
};

const onTrackingChanged = (isTracking) => {
  console.log('Tracking state changed:', isTracking);
};
</script>
```

## Available Letters

LetterPeople supports the following characters:
- Uppercase: A, C, D, E, F, G, H, I, J, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y
- Lowercase: a, b, c, d, h, i, j, l, m, n, o, p, q, r, u, v, w, x

## API Reference

### Letter Options

```typescript
interface LetterOptions {
  // Base letter appearance
  color?: string;            // Fill color of the letter
  lineWidth?: number;        // Thickness of the letter strokes
  borderColor?: string;      // Outline color
  borderWidth?: number;      // Outline thickness
  style?: "sans-serif" | "serif";
  debug?: boolean;           // Show debug elements like baselines
  
  // Eye options
  eyeSize?: number;          // Size of the eyes
  
  // Mouth options
  mouthParams?: {
    openness: number;        // 0-1, how open the mouth is
    mood: number;            // 0-1, 0=sad, 0.5=neutral, 1=happy
  };
  mouthAppearance?: {
    fillColor?: string;      // Interior color of mouth
    strokeColor?: string;    // Outline color of mouth
    strokeWidth?: number;    // Thickness of mouth outline
  };
  
  // Arm options
  armLength?: number;        // Length of the arms
  armThickness?: number;     // Thickness of the arms
  armColor?: string;         // Color of the arms
}
```

### Letter Instance API

Each `createLetter` call returns a `LetterInstance` with:

```typescript
interface LetterInstance {
  svgElement: SVGElement;        // The root SVG element
  character: string;             // The letter character
  parentElement: Element;        // Container element
  
  mouth: {
    show(): Promise<void>;
    hide(): Promise<void>;
    updateShape(params: { openness: number, mood: number }): Promise<void>;
    animateSpeak(options?: object): Promise<void>;
  };
  
  eyes: {
    left: { 
      show(), hide(), wink(),
      lookAt(direction), // Make pupil look in direction
      startTracking(), stopTracking(), isTracking()
    };
    right: {
      show(), hide(), wink(),
      lookAt(direction), // Make pupil look in direction
      startTracking(), stopTracking(), isTracking()
    };
    show(): Promise<void>;
    hide(): Promise<void>;
    blink(options?: object): Promise<void>;
    lookAt(direction: number | {x,y}, options?): Promise<void>; // Look in direction (angle or coordinates)
    startTracking(options?: {intensity?: number, ease?: string}): void; // Follow the cursor
    stopTracking(): void; // Stop following cursor
    isTracking(): boolean; // Check if currently tracking
  };
  
  arms: {
    left: { rotateTo(angle), setLength(length), wave() };
    right: { rotateTo(angle), setLength(length), wave() };
    show(): Promise<void>;
    hide(): Promise<void>;
    wave(options?: object): Promise<void>;
  };
  
  destroy(): void;  // Remove the letter and clean up
}
```

## Eye Tracking & Looking Functionality

LetterPeople includes an eye tracking feature that makes letters' eyes follow the mouse cursor:

```javascript
// Basic eye direction controls
letterL.eyes.lookAt(45);  // Look at 45 degree angle
letterL.eyes.lookAt({x: 3, y: -2});  // Look at specific offset coordinates

// Make eyes follow the cursor
letterL.eyes.startTracking();  // Start tracking with default settings
letterL.eyes.startTracking({intensity: 0.6});  // Track with 60% intensity
letterL.eyes.startTracking({intensity: 0.8, ease: "easeOutQuad"});  // With custom easing

// Check and control tracking state
const isTracking = letterL.eyes.isTracking();  // Check if tracking is active
letterL.eyes.stopTracking();  // Stop tracking

// Individual eye control
letterL.eyes.left.lookAt(30);  // Left eye looks at 30 degrees
letterL.eyes.right.lookAt(-30);  // Right eye looks at -30 degrees

// Animation options for looking
letterL.eyes.lookAt(90, {duration: 300, ease: "easeOutSine"});  // Animated eye movement
```

### Tracking in Vue Component

```vue
<template>
  <div class="letter-container">
    <LetterPerson
      letter="L"
      :options="{ eyeTracking: true, eyeTrackingIntensity: 0.7 }"
      ref="letterRef"
      @trackingChanged="onTrackingChanged"
    />
    <button @click="toggleTracking">Toggle Eye Tracking</button>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import LetterPerson from 'letterpeople/vue';

const letterRef = ref(null);
const isTracking = ref(true);

const toggleTracking = () => {
  // Returns current tracking state after toggle
  isTracking.value = letterRef.value?.toggleEyeTracking({
    intensity: 0.8
  });
};

const onTrackingChanged = (trackingState) => {
  isTracking.value = trackingState;
  console.log(`Eye tracking: ${trackingState ? 'on' : 'off'}`);
};
</script>
```

## Tips for Best Results

- Use a container with sufficient width/height to display the letter properly
- For lowercase letters with descenders (g, j, p, q, y), ensure extra vertical space
- For responsive layouts, apply CSS scaling to the container rather than the SVG
- When animating multiple letters, stagger the animations for a more natural effect
- When using eye tracking with multiple letters, all eyes will follow the cursor independently